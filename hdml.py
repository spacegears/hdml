import os
import re
import mimetypes
from datetime import datetime
from pathlib import Path

def get_folder():
    while True:
        target_folder = input("[INPUT] Enter parent folder path: ").strip()
        if os.path.isdir(target_folder):
            return target_folder
        else:
            print(f"[ERROR] Invalid path: '{target_folder}'. Please try again.")

def get_filename():
    while True:
        filename = input("[INPUT] Enter filename: ").strip()
        filename = clean_input(filename)
        return filename

def clean_input(input_string):
    pattern = re.compile(r'[^a-zA-Z0-9_-]')
    cleaned_string = pattern.sub('', input_string)
    return cleaned_string

def is_image(file_path):
    IMAGE_EXTS = {'.jpg', '.jpeg', '.png', '.gif', '.webp'}
    return file_path.suffix.lower() in IMAGE_EXTS

def find_images(target_folder):
    return [str(p) for p in Path(target_folder).rglob("*") if is_image(p)]

def generate_html(filename, filecount, image_paths):
    header = f"""<!DOCTYPE HTML>
	<!-- Created: {datetime.now().strftime("%B %d, %Y %H:%M:%S")}. Number of files: {filecount} -->
	<!-- Generated by hdml | https://github.com/spacegears/hdml -->
	<html>
	<head>
	<title>{filename}</title>
	<style>
	body {{ background: #171717; }}
	img {{ width: 100%; grid-area: 1 / 1 / 2 / 2; }}
	.grid {{ display: grid; grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); grid-gap: 1rem; }}
	.item {{ background: black; padding: 0.2rem; display: grid; place-items: center; }}
	.item::before {{ content: ""; display: block; padding-bottom: 100%; grid-area: 1 / 1 / 2 / 2; }}
	</style>
	</head>
	<body>
	<div class="grid">
	"""
    items = '\n'.join(f'<div class="item"><img src="{img}" title="{Path(img).stem}"></div>' for img in image_paths)
    footer = "</div>\n</body>\n</html>"
    return header + items + footer

def save_file(html_content, output_path):
    with open(output_path, 'w', encoding='utf-8') as file:
        file.write(html_content)

def main():
    print("[>>>>>] hdml by spacegears")
    target_folder = get_folder()
    filename = get_filename()
    filecreated = datetime.now().strftime("%Y%m%d")

    image_paths = find_images(target_folder)
    if not image_paths:
        print("[ERROR] No images found in folder.")
        return

    print("[>>>>>] Generating file...")

    image_paths.sort()
    filecount = len(image_paths)

    html_content = generate_html(filename, filecount, image_paths)
    script_directory = Path(__file__).resolve().parent
    output_path = script_directory / f"{filename}-{filecreated}.html"

    try:
        save_file(html_content, output_path)
    except IOError as e:
        print(f"[ERROR] Could not save file: {e}")

    print("----------------------------------------")
    print(f"[>>>>>] {filename}.html was successfully generated.")
    print(f"[>>>>>] file://{output_path}")

if __name__ == "__main__":
    main()
